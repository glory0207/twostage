25-09-21 20:17:24.103 - INFO:   name: DiffuseMorph_FIRE_Stage2_2D
  phase: train
  gpu_ids: [2]
  display_port: 8097
  path:[
    log: experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/logs/fire_stage2
    tb_logger: experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/tb_logger/fire_stage2
    results: experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/results/fire_stage2
    checkpoint: experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2
    resume_state: None
    experiments_root: experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724
  ]
  datasets:[
    centered: True
    train:[
      name: FIRE
      dataroot: ./FIRE/
      stage1_output_dir: ./output/
      batch_size: 1
      num_workers: 4
      use_shuffle: True
    ]
  ]
  model:[
    netDim: 2
    which_model_G: ddpm
    finetune_norm: False
    unet:[
      in_channel: 3
      out_channel: 1
      inner_channel: 64
      channel_multiplier: [1, 2, 4, 4]
      attn_res: [8]
      res_blocks: 1
      dropout: 0
    ]
    beta_schedule:[
      train:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
      val:[
        schedule: linear
        n_timestep: 2000
        linear_start: 1e-06
        linear_end: 0.01
      ]
    ]
    diffusion:[
      image_size: 512
      channels: 3
      conditional: True
    ]
    field:[
      in_channel: 2
      encoder_nc: [64, 128, 256, 512, 1024]
      decoder_nc: [1024, 512, 256, 128, 64, 2]
    ]
    loss_lambda: 50
  ]
  train:[
    n_epoch: 200
    val_freq: 100
    save_checkpoint_epoch: 10
    print_freq: 5
    optimizer:[
      type: adam
      lr: 5e-06
    ]
  ]
  distributed: False

25-09-21 20:17:24.302 - INFO: Dataset [FIREDataset - FIRE] is created.
25-09-21 20:17:24.302 - INFO: Initial Dataset Finished
25-09-21 20:17:25.002 - INFO: Initialization method [orthogonal]
25-09-21 20:17:25.628 - INFO: Initialization method [normal]
25-09-21 20:17:27.380 - INFO: Network structure: GaussianDiffusion, with parameters: 90,672,387
25-09-21 20:17:27.380 - INFO: GaussianDiffusion(
  (denoise_fn): UNet(
    (time_mlp): Sequential(
      (0): TimeEmbedding()
      (1): Linear(in_features=64, out_features=256, bias=True)
      (2): Swish()
      (3): Linear(in_features=256, out_features=64, bias=True)
    )
    (downs): ModuleList(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
      (2): Downsample(
        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (3): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (4): Downsample(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (5): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (6): Downsample(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (mid): ModuleList(
      (0): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
        (attn): SelfAttention(
          (norm): GroupNorm(32, 256, eps=1e-05, affine=True)
          (qkv): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (1): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Identity()
        )
      )
    )
    (ups): ModuleList(
      (0-1): 2 x ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (2): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 512, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (4): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=256, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 256, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (5): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (6): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 384, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (7): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=128, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (8): Upsample(
        (up): Upsample(scale_factor=2.0, mode='nearest')
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (9): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 192, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (10): ResnetBlocWithAttn(
        (res_block): ResnetBlock(
          (mlp): Sequential(
            (0): Swish()
            (1): Linear(in_features=64, out_features=64, bias=True)
          )
          (block1): Block(
            (block): Sequential(
              (0): GroupNorm(32, 128, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (block2): Block(
            (block): Sequential(
              (0): GroupNorm(32, 64, eps=1e-05, affine=True)
              (1): Swish()
              (2): Identity()
              (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
          )
          (res_conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (final_conv): Block(
      (block): Sequential(
        (0): GroupNorm(32, 64, eps=1e-05, affine=True)
        (1): Swish()
        (2): Identity()
        (3): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  (field_fn): registUnetBlock(
    (inconv): inblock(
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(2, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (downconv1): downblock(
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (downconv2): downblock(
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (downconv3): downblock(
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (downconv4): downblock(
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (upconv1): upblock(
      (upconv): ConvTranspose2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(1536, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (upconv2): upblock(
      (upconv): ConvTranspose2d(1024, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(1280, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (upconv3): upblock(
      (upconv): ConvTranspose2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(640, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (keepblock): CRblock(
      (block): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): LeakyReLU(negative_slope=0.2, inplace=True)
        (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (upconv4): upblock(
      (upconv): ConvTranspose2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))
      (block): CRblock(
        (block): Sequential(
          (0): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): LeakyReLU(negative_slope=0.2, inplace=True)
          (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): LeakyReLU(negative_slope=0.2, inplace=True)
        )
      )
    )
    (outconv): outblock(
      (block): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (spatialtransform): Dense2DSpatialTransformer()
  )
  (loss_func): MSELoss()
  (loss_ncc): crossCorrelation2D()
  (loss_reg): gradientLoss()
  (loss_landmark): LandmarkLoss()
  (loss_mi): MutualInformation2D()
  (loss_poly): PolynomialFlowRegularizer()
  (loss_ncc_masked): MaskedLoss(
    (base_loss): crossCorrelation2D()
  )
  (loss_ncc_overlap): OverlapMaskedLoss(
    (base_loss): crossCorrelation2D()
  )
  (loss_pixelwise): PixelwiseLoss(
    (loss_fn): SmoothL1Loss()
  )
  (loss_ssim): StructuralSimilarityLoss()
)
25-09-21 20:17:27.380 - INFO: Model [DDPM] is created.
25-09-21 20:17:27.380 - INFO: Initial Model Finished
25-09-21 20:23:06.946 - INFO: Saving models and training states.
25-09-21 20:23:08.746 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I1060_E10_gen_G.pth] ...
25-09-21 20:28:34.423 - INFO: Saving models and training states.
25-09-21 20:28:36.203 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I2120_E20_gen_G.pth] ...
25-09-21 20:34:05.028 - INFO: Saving models and training states.
25-09-21 20:34:06.777 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I3180_E30_gen_G.pth] ...
25-09-21 20:40:01.828 - INFO: Saving models and training states.
25-09-21 20:40:03.613 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I4240_E40_gen_G.pth] ...
25-09-21 20:45:57.755 - INFO: Saving models and training states.
25-09-21 20:45:59.504 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I5300_E50_gen_G.pth] ...
25-09-21 20:51:48.995 - INFO: Saving models and training states.
25-09-21 20:51:50.719 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I6360_E60_gen_G.pth] ...
25-09-21 20:57:28.276 - INFO: Saving models and training states.
25-09-21 20:57:30.075 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I7420_E70_gen_G.pth] ...
25-09-21 21:03:15.445 - INFO: Saving models and training states.
25-09-21 21:03:17.230 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I8480_E80_gen_G.pth] ...
25-09-21 21:08:57.768 - INFO: Saving models and training states.
25-09-21 21:08:59.519 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I9540_E90_gen_G.pth] ...
25-09-21 21:14:42.623 - INFO: Saving models and training states.
25-09-21 21:14:44.446 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I10600_E100_gen_G.pth] ...
25-09-21 21:20:30.747 - INFO: Saving models and training states.
25-09-21 21:20:32.517 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I11660_E110_gen_G.pth] ...
25-09-21 21:26:15.643 - INFO: Saving models and training states.
25-09-21 21:26:17.465 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I12720_E120_gen_G.pth] ...
25-09-21 21:32:03.677 - INFO: Saving models and training states.
25-09-21 21:32:05.511 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I13780_E130_gen_G.pth] ...
25-09-21 21:37:53.208 - INFO: Saving models and training states.
25-09-21 21:37:55.225 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I14840_E140_gen_G.pth] ...
25-09-21 21:43:45.448 - INFO: Saving models and training states.
25-09-21 21:43:47.270 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I15900_E150_gen_G.pth] ...
25-09-21 21:49:37.217 - INFO: Saving models and training states.
25-09-21 21:49:38.978 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I16960_E160_gen_G.pth] ...
25-09-21 21:55:30.135 - INFO: Saving models and training states.
25-09-21 21:55:31.937 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I18020_E170_gen_G.pth] ...
25-09-21 22:01:22.505 - INFO: Saving models and training states.
25-09-21 22:01:24.230 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I19080_E180_gen_G.pth] ...
25-09-21 22:07:16.350 - INFO: Saving models and training states.
25-09-21 22:07:18.155 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I20140_E190_gen_G.pth] ...
25-09-21 22:13:25.932 - INFO: Saving models and training states.
25-09-21 22:13:27.714 - INFO: Saved model in [experiments/DiffuseMorph_FIRE_Stage2_2D_250921_201724/checkpoint/fire_stage2/I21200_E200_gen_G.pth] ...
25-09-21 22:13:27.715 - INFO: End of training.
